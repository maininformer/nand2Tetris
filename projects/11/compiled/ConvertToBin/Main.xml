<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>{'category': 'class', 'defined': True, 'kind': None, 'index': None}
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>{'category': 'subroutine', 'defined': True, 'kind': None, 'index': None}
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> value </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 0}
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>{'category': 'subroutine', 'defined': False, 'kind': None, 'index': None}
          <symbol> . </symbol>
          <identifier> fillMemory </identifier>{'category': 'subroutine', 'defined': False, 'kind': None, 'index': None}
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 8001 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 16 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> value </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 4}
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Memory </identifier>{'category': None, 'defined': False, 'kind': None, 'index': None}
              <symbol> . </symbol>
              <identifier> peek </identifier>{'category': 'subroutine', 'defined': False, 'kind': None, 'index': None}
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 8000 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Main </identifier>{'category': 'subroutine', 'defined': False, 'kind': None, 'index': None}
          <symbol> . </symbol>
          <identifier> convert </identifier>{'category': 'subroutine', 'defined': False, 'kind': None, 'index': None}
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> value </identifier>{'category': None, 'defined': False, 'kind': 'VAR', 'index': 4}
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> convert </identifier>{'category': 'subroutine', 'defined': True, 'kind': None, 'index': None}
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> value </identifier>{'category': 'ARG', 'defined': True, 'kind': 'ARG', 'index': 0}
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> mask </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 1}
        <symbol> , </symbol>
        <identifier> position </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 2}
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> loop </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 3}
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> loop </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 4}
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> loop </identifier>{'category': None, 'defined': False, 'kind': 'VAR', 'index': 4}
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> position </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 5}
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> position </identifier>{'category': None, 'defined': False, 'kind': 'VAR', 'index': 5}
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> mask </identifier>{'category': 'VAR', 'defined': True, 'kind': 'VAR', 'index': 6}
              <symbol> = </symbol>
              <expression>
                <term>
